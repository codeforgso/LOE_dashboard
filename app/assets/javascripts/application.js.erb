// This is a manifest file that'll be compiled into application.js, which will include all the files
// listed below.
//
// Any JavaScript/Coffee file within this directory, lib/assets/javascripts, vendor/assets/javascripts,
// or any plugin's vendor/assets/javascripts directory can be referenced here using a relative path.
//
// It's not advisable to add code directly here, but if you do, it'll appear at the bottom of the
// compiled file.
//
// Read Sprockets README (https://github.com/rails/sprockets#sprockets-directives) for details
// about supported directives.
//
//= require jquery
//= require jquery_ujs
//= require turbolinks
//= require bootstrap-sprockets
//= require bootstrap-datepicker/core
//= require bootstrap3-typeahead
//= require_tree .

// necessary to get routes to paths
<% environment.context_class.instance_eval { include Rails.application.routes.url_helpers; require 'dotenv'; Dotenv.load }
%>


var App = window.App || {};
App.urls = {
  cases: {
    autocomplete: '<%= url_for(autocomplete_cases_path) %>'
  },
  application: {
    config: '<%= url_for(application_js_config_path) %>'
  }
};
App.google_maps_api_key = '<%= ENV['GOOGLE_MAPS_API_KEY'] %>';
App.google_analytics_id = '<%= ENV['GOOGLE_ANALYTICS_ID'] %>';
App.development_environment = <%= ::Rails.env.development? %>;
(function($, undefined) {
  App.init = function() {
    Turbolinks.enableProgressBar();
    App.setup_autocomplete();
    App.setup_tabs();
    App.setup_google_maps();
    if (!App.development_environment) {
      App.setup_google_analytics();
    }
  }

  App.setup_autocomplete = function() {
    $.each($("[data-autocomplete]"),function(i, item) {
      var item_sel = $(item);
      var form = item_sel.parentsUntil("form").parent('form');
      var controller = form.attr('action').split("/")[1];
      var url = App.urls[controller].autocomplete+'?param='+item_sel.data('autocompleteParam');
      item_sel.typeahead({
        delay: 100,
        source: function(query, process) {
          $.getJSON(
            url+'&q='+query,
            function(data) {
              return process(data);
            }
          );
        }
      });
    });
  }

  App.setup_tabs = function() {
    $("ul.nav-tabs a").click(function(e) {
      e.preventDefault();
      $(this).tab('show');
    });
  }

  App.setup_google_maps = function() {
    var sel = $("[data-google-maps-iframe-wrapper]");
    if (sel.length > 0) {
      // Heroku *sometimes* picks up the API key during `rake assets:precompile`.
      // We will get it via AJAX as a fallback if it is missing.
      App.google_maps_api_key = App.google_maps_api_key || '';
      if (App.google_maps_api_key.toString().match(/[A-Za-z0-9]{4,}/) ) {
        $.each(sel, function(i, item) {
          var item_sel = $(item);
          var iframe = document.createElement('iframe');
          iframe.frameBorder=0;
          iframe.id="randomid";
          iframe.setAttribute('class', 'google-maps-iframe');
          iframe.setAttribute("src", "https://www.google.com/maps/embed/v1/place?key="+App.google_maps_api_key+"&q="+item_sel.data('googleMapsQuery'));
          item_sel.html(iframe);
        });
      } else {
        console.log('get config...');
        App.get_config(App.setup_google_maps);
      }
    }
  }

  App.get_config = function(callback) {
    if (typeof(App.config) === 'undefined') {
      $.getJSON(
        App.urls.application.config
      ).done(function(data, status, xhr) {
        App.config = data;
        App.google_maps_api_key = App.config.google_maps_api_key;
        App.google_analytics_id = App.config.google_analytics_id;
        if (typeof(callback) === 'function') {
          callback.call();
        }
      }).fail(function(xhr, status, err) {
        console.log(status, err, xhr);
      });
    } else {
      if (typeof(callback) === 'function') {
        callback.call();
      }
    }
  }

  App.setup_google_analytics = function() {
    App.google_analytics_id = App.google_analytics_id || '';
    if (App.google_analytics_id.toString().match(/[A-Za-z0-9]{4,}/) ) {
      (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
      (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
      m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
      })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

      ga('create', App.google_analytics_id, 'auto');
      ga('send', 'pageview');
    } else {
      console.log('get config...');
      App.get_config(App.setup_google_analytics);
    }
  }

  // this is the Turbolinks event to bind to for page refreshes + DOM ready
  $(document).on('page:change', function(e) {
    App.init();
  });
})(jQuery);